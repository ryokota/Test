<apex:component id="csoScriptComp" access="global" allowDML="true">
<apex:outputText escape="false" value="</span>"/>
<script type="text/javascript">
function showModalDialog(result, height, width, okFunc) {
    var dom = "";
    if (result["code"] || result["code"] != undefined) {
        dom += "Code : " + result["code"] + "<br>";
        dom += "Message : " + result["message"];
    } else {
        dom += result["message"];
    }
    $("body").append("<div id='dialog_div' style='display:none;' title='" + '{!$Label.label_10026}' + "'></div>")
    $("#dialog_div").html(dom);
    $("#dialog_div").dialog({modal : true,
                             resizable : false,
                             height : height,
                             width : width,
                             show : "fold",
                             buttons : {"OK" : function() {
                                        $(this).dialog("close");
                                        $("#dialog_div").remove();
                                       }
                             },
                             close : okFunc
    });
}

$(function() {
    $.cloneObject = function(source,isDeep) {
        if(isDeep){
            return $.extend(true,{},source);
        }
        return $.extend({},source);
    }

    if ($.datepicker) {
        $.datepicker.setDefaults({dateFormat : 'yy/mm/dd',
                                  showMonthAfterYear : true,
                                  dayNames : ['{!$Label.label_00022}', '{!$Label.label_00023}', '{!$Label.label_00024}', '{!$Label.label_00025}', '{!$Label.label_00026}', '{!$Label.label_00027}', '{!$Label.label_00028}',],
                                  dayNamesMin : ['{!$Label.label_00015}', '{!$Label.label_00016}', '{!$Label.label_00017}', '{!$Label.label_00018}', '{!$Label.label_00019}', '{!$Label.label_00020}', '{!$Label.label_00021}',],
                                  monthNames : ['{!$Label.label_00003}', '{!$Label.label_00004}', '{!$Label.label_00005}', '{!$Label.label_00006}', '{!$Label.label_00007}', '{!$Label.label_00008}', '{!$Label.label_00009}', '{!$Label.label_00010}', '{!$Label.label_00011}', '{!$Label.label_00012}', '{!$Label.label_00013}', '{!$Label.label_00014}',]
        });
    }

    // IEがリクエストをキャッシュしてしまう問題の回避
    $.ajaxSetup({cache:false});

    // jqGridの共通オプション
    if ($.jgrid && $.jgrid.defaults) {
        $.extend($.jgrid.defaults,{
            datatype: "jsonp",
            jsonReader :{
                repeatitems: false,
                id         : "id"
            },
            rowNum : 10,
            rowList:[10, 50, 100],
            viewrecords: true,
            autowidth: true,
            shrinkToFit : false
        });
    }

    $(".csoCloseIcon").each(function(e){
        var inputObj = $(this);
        var $ci = $("<a>").attr("href", "javascript:void(0);").css({
            "position"          : "absolute",
            "background-image"  : "url('{!URLFOR($Resource.cso, '/image/text-close.png')}')",
            "height"            : "16px",
            "width"             : "16px",
            "top"               : "-1px",
            "right"             : "10px",
            "display"           : "none",
        }).click(function(e){
            inputObj.val("");
            eval(inputObj.attr("clr-act"));
            $(this).fadeOut();
            inputObj.focus();
        });
        $(this).css("padding-right", "30px").after($ci);
        $(this).keyup(function(e){
            if($(this).val().length > 0){
                $ci.fadeIn();
            }else{
                $ci.fadeOut();
            }
        });
    });
});

$(function() {
    // IE コンソールを開かないときはconsoleが未定義になる
    if (!('console' in window)) {
        window.console = {};
        window.console.log = function(str){
            return str;
        };
        window.console.info = function (str) {
            return str;
        };
    }
});

/**
 * tの文字列長を判定し、残りの文字数をvの要素の中に格納します。
 * 本関数は、入力エリアのonKeyUpイベントにバインドして下さい。
 * @param t 判定を行う入力エリアのid
 * @param v 残りの文字数を表示する要素id
 * @param maxSize 最大文字数
 * @return 無し
 */
function viewCommentLength(t, v, maxSize){
    var regexp = RegExp(/\r\n|\r|\n/g);
    var str = $("#" + t).val().replace(regexp, "\r\n");
    var size = maxSize - str.length;

    if(size <= 0){
        $("#" + v).css("color","#FF0000");
    }else{
        $("#" + v).css("color","#000000");
    }

    $("#" + v).text(getMsg(new Array(size + ""), '{!$Label.label_10227}'));

}

function coloradoEncode(str){
    return str.replaceAll("#","%23").replaceAll("&","%26");
}

/**
 * 引数nameに格納された文字文字の字数が引数maxSizeを超えるとmaxSizeで指定した文字数-2文字に「...」をつけて返す
 *
 * @param name 処理を実行する文字列
 * @param maxSize 文字列の最大長(この値を超えると超えた部分の文字列を「...」に変換する。)
 * @return 変換後の文字列
 */
function replaceLongName(name,maxSize){
    var nameLength;
    var moji,moji2;
    nameLength=name.length;

    if(nameLength>maxSize){
        moji2=name.substring(0,maxSize-2) +"...";
        name = name.replace(name,moji2);
    }
    return name;
}


/**
 * ブラウザの表示エリアの高さを取得する
 *
 * @return ブラウザの表示エリアの高さ
 */
function getBrowserHeight() {
    if ( window.innerHeight ) {
        return window.innerHeight;
    } else if ( document.documentElement && document.documentElement.clientHeight != 0 ) {
        return document.documentElement.clientHeight;
    } else if ( document.body ) {
        return document.body.clientHeight;
    }
    return 0;
}

/**
 * ブラウザの表示エリアの幅を取得する
 *
 * @return 無し
 */
function getBrowserWidth() {
    if ( window.innerWidth ) {
        return window.innerWidth;
    } else if ( document.documentElement && document.documentElement.clientWidth != 0 ) {
        return document.documentElement.clientWidth;
    } else if ( document.body ) {
        return document.body.clientWidth;
    }
    return 0;
}

/**
 * ブラウザの種類を取得する
 *
 * @return ブラウザ名の文字列
 */
function getBrowserType(){

    var userAgent = window.navigator.userAgent.toLowerCase();
    var appVersion = window.navigator.appVersion.toLowerCase();

    if (userAgent.indexOf("msie") > -1) {
        if (appVersion.indexOf("msie 6.0") > -1) {
            userAgent="IE6";
        } else if (appVersion.indexOf("msie 7.0") > -1) {
            userAgent="IE7";
        } else if (appVersion.indexOf("msie 8.0") > -1) {
            userAgent="IE8";
        } else if (appVersion.indexOf("msie 9.0") > -1) {
            userAgent="IE9";
        } else if (appVersion.indexOf("msie 10.0") > -1) {
            userAgent="IE10";
        } else {
            userAgent="IE";
        }
    } else if (userAgent.match(/trident.+rv:11/i)) {
        userAgent="IE11";
    } else if (userAgent.indexOf("firefox") > -1) {
        userAgent="Firefox";
    } else if (userAgent.indexOf("opera") > -1) {
        userAgent="Opera";
    } else if (userAgent.indexOf("chrome") > -1) {
        userAgent="Chrome";
    } else if (userAgent.indexOf("safari") > -1) {
        userAgent="Safari";
    } else {
        userAgent="Unknown";
    }

  return userAgent;
}

/**
 * 使用機種がipadか判定する
 *
 * @return boolean
 */
function isIpad(){

    var userAgent = window.navigator.userAgent.toLowerCase();

    if (userAgent.indexOf("ipad") > -1) {
        return true;
    } else {
        return false;
    }

}

/**
 * 使用機種がiPhoneか判定する
 *
 * @return boolean
 */
function isIphone(){

    var userAgent = window.navigator.userAgent.toLowerCase();

    if (userAgent.indexOf("iphone") > -1) {
        return true;
    } else {
        return false;
    }

}

$(function () {
  var supportsInputAttribute = function (attr) {
    var input = document.createElement('input');
    return attr in input;
  };
  if (!supportsInputAttribute('placeholder')) {
    $('[placeholder]').each(function () {
      var
        input = $(this),
        placeholderText = input.attr('placeholder'),
        placeholderColor = 'GrayText',
        defaultColor = input.css('color');
      input.
        focus(function () {
          if (input.val() === placeholderText) {
            input.val('').css('color', defaultColor);
          }
        }).
        blur(function () {
          if (input.val() === '') {
            input.val(placeholderText).css('color', placeholderColor);
          } else if (input.val() === placeholderText) {
            input.css('color', placeholderColor);
          }
        }).
        blur().
        parents('form').
          submit(function () {
            if (input.val() === placeholderText) {
              input.val('');
            }
          });
    });
  }
});

/**
 * クリッカブルパス表示エリアを可変にする
 *
 * @param pathArea クリッカブルパス表示エリア
 * @param tempPathArea パス表示エリアの長さを調べる仮エリア
 * @return なし
 */
function setClickablePathListText(pathArea,tempPathArea){

    var pathSpaceWidth,tmpPathAreaWidth;
    var work,lastChild,parents;
    var pathCut = false;
    var index=0;
    var textLength = 0;
    var path;
    var tmpPathWidthB4Cut;

    pathSpaceWidth =  $(pathArea).width() - 50;
    work = $(tempPathArea).text();
    path =  $(tempPathArea).html();
    tmpPathAreaWidth = $(tempPathArea).width() - 0;

    if(tmpPathAreaWidth <= 0){
        return;
    }
    //do untill the path is fit in.
    while (pathSpaceWidth < tmpPathAreaWidth) {
        tmpPathWidthB4Cut = $(tempPathArea).width();
        //remove the first path.
        index = work.indexOf(' > ');
        index+=3;

        if (index == -1){
            return false;
        }

        textLength =work.length;
        work = work.substring(index,textLength);

        $(tempPathArea).html(work);

        tmpPathAreaWidth = $(tempPathArea).width();
        if(tmpPathWidthB4Cut == tmpPathAreaWidth){
            break;
        }
        pathCut = true;
    }

    if(pathCut == true){
        work = '> ' + work;
    }else{
        $(pathArea).html(path);
        return;
    }

    index = work.lastIndexOf(' > ');
    index +=3;

    parents = work.substring(0,index -1);
    lastChild = work.substring(index,textLength);


    work = parents + "<span class='path-bold'> " + lastChild + "</span>";
    $(pathArea).html(work);
}

/**
 * パス表示エリアを可変にする
 *
 * @param pathArea パス表示エリア
 * @param tempPathArea パス表示エリアの長さを調べる仮エリア
 * @return なし
 */
function setPathListText(pathArea,tempPathArea){

    var pathSpaceWidth,tmpPathAreaWidth;
    var work,lastChild,parents;
    var pathCut = false;
    var index=0;
    var textLength = 0;
    var path;
    var tmpPathWidthB4Cut;

    pathSpaceWidth =  $(pathArea).width() - 50;
    work = $(tempPathArea).text();
    path =  $(tempPathArea).html();
    tmpPathAreaWidth = $(tempPathArea).width() - 0;

    if(tmpPathAreaWidth <= 0){
        return;
    }
    //do untill the path is fit in.
    while (pathSpaceWidth < tmpPathAreaWidth) {
        tmpPathWidthB4Cut = $(tempPathArea).width();
        //remove the first path.
        index = work.indexOf(' > ');
        index+=3;

        if (index == -1){
            return false;
        }

        textLength =work.length;
        work = work.substring(index,textLength);

        $(tempPathArea).html(work);

        tmpPathAreaWidth = $(tempPathArea).width();
        if(tmpPathWidthB4Cut == tmpPathAreaWidth){
            break;
        }
        pathCut = true;
    }

    if(pathCut == true){
        work = '> ' + work;
    }else{
        $(pathArea).html(path);
        return;
    }

    index = work.lastIndexOf(' > ');
    index +=3;

    parents = work.substring(0,index -1);
    lastChild = work.substring(index,textLength);


    work = parents + "<span class='path-bold'> " + lastChild + "</span>";
    $(pathArea).html(work);

}

/**
 * テキスト表示エリアを可変にする
 *
 * @param textArea パス表示エリア
 * @param tempTextArea パス表示エリアの長さを調べる仮エリア
 * @return なし
 */
function setFlexibleText(textArea,tempTextArea){

    var textSpaceWidth,tmpTextAreaWidth;
    var work;
    var pathCut = false;
    var textLength = 0;
    var text;
    var tmpTextWidthB4Cut;

    textSpaceWidth =  $(textArea).width();
    work = $(tempTextArea).text();
    text =  $(tempTextArea).text();
    tmpTextAreaWidth = $(tempTextArea).width() - 0;

    if(text.length <= 0){
        $(textArea).text(text);
        return;
    }

    //do untill the text is fit in.
    while (textSpaceWidth < tmpTextAreaWidth) {
        tmpTextWidthB4Cut = $(tempTextArea).width();
        //remove the last letter.
        textLength =work.length;
        work = work.substring(0,textLength -1);

        $(tempTextArea).text(work);

        tmpTextAreaWidth = $(tempTextArea).width();
        if(tmpTextWidthB4Cut == tmpTextAreaWidth){
            break;
        }
        pathCut = true;
    }

    if(pathCut == true){
        work=work.substring(0,work.length - 2) +"...";
        $(textArea).html(work);
    }else{
        $(textArea).text(text);
    }
    return;
}


function setFlexibleTextForSF(textArea,lineHeight){
    var h = $(textArea).height();
    var cutFlag = false;

    while(h >= lineHeight){
        var t = $(textArea).text();
        t = t.substring(0, t.length - 1);
        $(textArea).text(t);
        h = $(textArea).height();
        cutFlag = true;
    }

    if(cutFlag){
        var t = $(textArea).text();
        t = t.substring(0, t.length - 3) + '...';
        $(textArea).text(t);
    }
    $(textArea).css('white-space', 'nowrap');
    return;
}


/*
 * プレースホルダーリプレース処理後のメッセージを返却する
 */
function getMsg(array, jsMsg){
    for(var i = 0; i < array.length; i++){
        var oldStr = "{" + i + "}";
        var newStr = array[i];
        jsMsg = jsMsg.replace(oldStr, newStr);
    }
    return jsMsg;
}

/*
 * jQuery向けIDセレクター生成
 */
function getId(id) {
    return '#' + id.replace(/(:|\.)/g,'\\\\$1');
}

/*
 * jQuery向けIDNAMEセレクター生成
 */
function getIdName(id) {
    return id.replace(/(:|\.)/g,'\\\\$1');
}

/*
 * jQuery向けNAMEセレクター生成
 */
function getName(name){
    return 'input[name="' + (name.replace(/(:|\.)/g,'\\\\$1') + '"]');
}

/*
 * jquery ui dialog resize option override
 */
$.extend($.ui.dialog.prototype.options, {
        resizable: false
});

/*
 * Labelクリック
 */
function CsoScript_clickLabel(label){
    var userAgent = window.navigator.userAgent.toLowerCase();
    var appVersion = window.navigator.appVersion.toLowerCase();
    if (userAgent.indexOf("msie") == -1) {
        return;
    }
    if (appVersion.indexOf("msie 8") == -1) {
        return;
    }

    var obj = null;
    try {
        obj = document.getElementById(label.htmlFor);
    }
    catch (exception){}
    if (obj == null) {
        return;
    }

    if(obj.tagName != "INPUT"){
        return;
    }

    if(obj.type == "radio"){
        obj.checked = true;
        obj.click();
    }
}


/*
 * Loadingダイアログ生成
 */
$(function() {
    $("#CsoScriptLoadingArea").dialog({
        autoOpen: false,
        closeOnEscape: false,
        draggable: false,
        width: 120,
        minHeight: 30,
        modal: true,
        resizable: false
    });

    $("div[aria-labelledby='ui-dialog-title-CsoScriptLoadingArea'] > :first").hide();
});
/*
 * Loadingダイアログ表示
 */
function CsoScript_loadingStart(){
    $("#CsoScriptLoadingArea").dialog("open");
}
/*
 * Loadingダイアログ非表示
 */
function CsoScript_loadingStop(){
    $("#CsoScriptLoadingArea").dialog("close");
}

/*
 * ０パディング
 */
function zeroPadding(num, len){
    if(String(num).length == len){
        return num;
    } else {
        var al = len - String(num).length;
        var e = '';
        for(i = 0; i < al; i++){
            e += '0';
        }
        return e + num;
    }
}

//if(getBrowserType() == 'Safari'){
//    alert('{!$Label.msg_00139}');
//}
// モバイル表示制御
function checkMobileAuth(){
    var callback_mobileAuth = function(data){
        if(!data.result) {
            console.info(data);
        } else {
            var _platform = window.navigator.platform;
            var regexExp = new RegExp(data.banMobileRegex, 'ig');

            if(data.banMobileLogin && _platform.match(regexExp)){
                if($('#bodyTable').html() != null){
                    $('#bodyTable').html('<div style="padding:20px 0 10px 20px">{!$Label.label_13274}</div>');
                } else {
                    $('body').remove();
                    $('html').html($('<body/>').html('<div style="padding:20px 0 10px 20px">{!$Label.label_13274}</div>'));
                }
            }
        }
    };
    secureGetAsync("/common/mobile/mobileLoginDecision.json", {}, callback_mobileAuth);
}

if((getBrowserType() != 'Safari')&&(getBrowserType() != 'Chrome')&&(getBrowserType() != 'Firefox')&&(getBrowserType() != 'IE11')){
    if (typeof(Silverlight) != 'undefined' && !(Silverlight.isInstalled('4.1'))) {
        if(getBrowserType().toLowerCase().indexOf('ie') >= 0){
            if($('#bodyTable').html() != null){
                $('#bodyTable').hide();
                alert('{!$Label.msg_01072}');
            } else {
                alert('{!$Label.msg_01072}');
            }
        } else {
            if($('#bodyTable').html() != null){
                $('#bodyTable').html('<div style="padding:20px 0 10px 20px">{!$Label.msg_01072}</div>');
            } else {
                $('body').remove();
                $('html').html($('<body/>').html('<div style="padding:20px 0 10px 20px">{!$Label.msg_01072}</div>'));
            }
        }
    }
}

function showTips(o, msgCodes) {
    var obj = $(o);
    var offset = obj.offset();

    $(".tooltip").css("left", offset.left + 5).css('top', offset.top -100).css('position','absolute').css('height', 'auto');

    $('.tooltip').html('');
    var massage = '';
    for(var i=0; i<msgCodes.length; i++){
        massage += msgCodes[i];
    }
    $('.tooltip').html(massage);

    $(".tooltip").show();
}

function hideTips(o){
    $(".tooltip").hide();
}
</script>

<div id="CsoScriptLoadingArea" style="display:none">
    <img src="{!URLFOR($Resource.cso, '/image/loading.gif')}" style="width:12px;" />
    &nbsp;
    Please wait...
</div>
<apex:outputText escape="false" value="<span>"/>
</apex:component>