<apex:page showHeader="false" controller="OpenCTIController" cache="false">
<script type="text/javascript">
    //アダプタ設定
    callFromContactANI = '09066525540';
    callFromIVRCaseNumber = '00001001';
    basicScreenPopUrl = '/500/e?cas14=Call%20From%200357858385';
    callFromLeadANI = '0357858385';
    disableSoftphoneInStandardApp = false;
    callLogSubject = '通話ログ -  ';
</script>

<style type="text/css">
html, body {
    height: 100%;
    text-align: center;
    font-size:0.80em;
}

/* Inbound and Outbound icon sprite */
.callDiv{
    width: 20px;
    height: 20px;
    display: inline-table;
    background-image: url({!URLFOR($Resource.opencti_resources,'cti_sprite.png')});
}
.inboundCall{
    background-position: -0px -20px;
}
.outboundCall{
    background-position: -0px -40px;
}

.bPageBlock {
    border-top: 4px solid #F8F8F8;
}

.yui3-skin-night table.yui3-datatable-table {
    margin-left: auto !important;
    margin-right: auto !important;
}
.yui3-skin-night .yui3-datatable-cell {
    color: #4A4A56 !important;
    border : 0 !important;
}

.yui3-skin-night .yui3-tabview-list, .yui3-skin-night .yui3-widget-hd, .yui3-skin-night .yui3-widget-ft {   
    z-index:1;
    border:1px solid #d5dadc !important;
    border-bottom-color:#8A8C8D !important;
    padding:2px 2px !important;
    background: #ffffff !important;
    background: -moz-linear-gradient(top,  #ffffff 0%, #ededed 100%) !important;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#ededed)) !important;
    background: -webkit-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -o-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -ms-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    font-size:1em !important;
    background-color:#4A4A56 !important;
}

.yui3-skin-night .yui3-widget-hd {
    color: #4A4A56 !important;
}

.yui3-skin-night .yui3-tabview-panel {
    background-color:#E0E8E8 !important;
}

.yui3-skin-night .yui3-button {
    background-color:#E0E8E8 !important;
    color: #4A4A56 !important;
}

.yui3-skin-night .yui3-tabview-list li a {
    background: -webkit-gradient(linear,left bottom,left top,from(#E0E8E8), to(#F1FAFE)) !important;
    background: -moz-linear-gradient(top, #E0E8E8 0%, #F1FAFE 100%) !important;
    color: #4A4A56 !important;
    border: 0 !important;
    border-right : solid 1px #E0E8E8 !important;
    text-shadow: none !important;
}

.yui3-skin-night .yui3-datatable-table {
    z-index:1;
    border:1px solid #d5dadc !important;
    border-bottom-color:#8A8C8D !important;
    padding:2px 2px !important;
    background: #ffffff !important;
    background: -moz-linear-gradient(top,  #ffffff 0%, #ededed 100%) !important;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#ededed)) !important;
    background: -webkit-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -o-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -ms-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    font-size:1em !important;
    background-color:#4A4A56 !important;    
}

.yui3-skin-night .yui3-datatable-header {
    display : none;
}

.yui3-skin-night .yui3-datatable-message-content {
    background-color: inherit !important;
    color: #4A4A56;
    border-bottom : 0 !important;
}

.yui3-skin-night .yui3-datatable-odd .yui3-datatable-cell {
    background-color: Transparent !important;
}

.yui3-skin-night .yui3-datatable-even .yui3-datatable-cell {
    background-color: Transparent !important;
}

.yui3-skin-night .yui3-widget-stdmod {
    background-color: #E0E8E8 !important;
    color: #4A4A56;
}

</style>

<div id="softphonePanel" style="height:100%;background-color:#E0E8E8;">
    <div id="panelLogin">
        <div class="yui3-widget-bd">
            <form>
            <fieldset>
                <p>
                    <label for="labelUsername">
                       ユーザ名</label><br />
                    <input type="text" name="Username" id="inputUsername" placeholder="" />
                </p>
                <p>
                    <label for="labelPassword">
                        パスワード</label><br />
                    <input type="password" name="Password" id="inputPassword" value="" placeholder="" />
                </p>
                <p>
                    <label for="labelExtension">
                        エクステンション</label><br />
                    <input type="text" name="Extension" id="inputExtension" value="" placeholder="" />
                </p>
            </fieldset>
            </form>
        </div>
    </div>
    <div class="yui3-tabview-panel" style="text-align: center">
        <select id="selectDisposition">
            <option value="readyForCalls">待機中</option>
            <option value="onCall">通話中</option>
            <option value="wrapUp">通話ログ入力中</option>
            <option value="lunch">休憩中</option>
        </select>
        <button id="buttonLogout">
            ログアウト</button>
    </div>
    <div id="callControl">
        <ul>
            <li><a href="#linkMenu">メニュー</a></li>
            <li><a href="#linkPhone">通話</a></li>
            <li><a href="#linkHelp">ヘルプ</a></li>            
        </ul>
        <div>
            <div id="linkMenu" style="text-align: center;">
            
                <apex:form >
                    <apex:pageBlock >
                        <apex:outputLabel value="名前: " for="Name" />
                        <apex:inputText value="{!ContactName}" id="contactName" >
                        <apex:actionSupport action="{!doSearch}" event="onkeyup" rerender="resultBlock"/>
                        </apex:inputText>
                        <apex:commandButton value="検索" action="{!doSearch}" rerender="resultBlock"/>                  
                    </apex:pageBlock>
                </apex:form>
                
                <apex:pageBlock id="resultBlock">
                    <div style="margin:5px">クイック通話</div>
                    <apex:pageBlockTable value="{!contactList}" var="cur">
                        <apex:column headerValue="アクション">
                            <div class="callDiv inboundCall" onclick="javascript:YUI.VisualforceCallControl.callFromNumber('{!cur.LastName} {!cur.FirstName}', '{!cur.Phone}')"/>
                            <div style="width:20px; display:inline-table;"/>
                            <div class="callDiv outboundCall" onclick="javascript:YUI.VisualforceCallControl.callToNumber('{!cur.LastName} {!cur.FirstName}','{!cur.Phone}')"/>
                        </apex:column>
                        <apex:column headerValue="連絡先">
                            <a href="javascript:YUI.VisualforceCallControl.callToNumber('{!cur.LastName} {!cur.FirstName}','{!cur.Phone}')">{!cur.LastName} {!cur.FirstName}</a>
                        </apex:column>
                        <apex:column headerValue="電話番号">
                            <a href="javascript:YUI.VisualforceCallControl.callToNumber('{!cur.LastName} {!cur.FirstName}','{!cur.Phone}')">{!cur.Phone}</a>
                        </apex:column>
                    </apex:pageBlockTable>
                </apex:pageBlock>   
            </div>
            <div id="linkPhone" style="text-align: center;">
                <div style="vertical-align:super">
                    <div id="divCallData" style="height:100%;display:inline-table;"/>
                    <div style="display:inline-table; padding-left: 10px;">
                        <div id="divDuration"><br/>
                            <span id="spanMinutes" /> : <span id="spanSeconds" />
                        </div>
                        <div class="endCall"><br/>
                            <button id="buttonEndCall">通話終了</button>
                        </div>
                    </div>
                </div>
                <div><br/><br/>
                    通話ログを入力...<br/>
                    <textarea style="overflow:hidden; width:75%;" rows="5" id="inputTextLog" onkeyup="YUI.VisualforceCallControl.handleLogEntry();"/>
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>通話結果:<br/>
                    <div style="display:inline-table">
                        <input type="radio" name="callDisposition" value="Add to do-not-call list"/> 通話禁止に追加 <br/>
                        <input type="radio" name="callDisposition" value="Call Successful"/> 通話成功 <br/>
                    </div>
                    <div style="display:inline-table">
                        <input type="radio" name="callDisposition" value="Left Voicemail"/> 留守電を残す <br/>
                        <input type="radio" name="callDisposition" value="Number out of service"/> 電話番号が無効 <br/>
                    </div>
                </div>
            </div>
            <div id="linkHelp" style="text-align: left;">
                <p>
                    Salesforce OpenCTI Callコントロール取り扱い
                    <br/><br/>
                    <a href="#linkAboutThisCallControlTool">「このコントロールについて」へジャンプ</a>
                    <br/>
                    <a href="#linkToUseThisCallControl">「このコントロールの使い方について」へジャンプ</a>
                </p>
                <p>
                    <a name="linkAboutThisCallControlTool">このコントロールについて</a><br/>
                    このコントロールには主に以下の二つの用途で作成されています :
                    <br/> - Salesforce.comのCTIインテグレーション機能のデモンストレーション。このツールを使えばスクリーンポップアップ、クリックダイアル, 通話ログ、レポートなどの挙動を実際に確認できます。
                    <br/> - CTI連携をプログラミングするにあたってのサンプルコードとしてご利用頂けます。                    
                    <br/>このコードコントロールは実際のテレフォニーシステムと連携している訳ではありません。実際の多くの場合はSalesforce.comのお客様はテレフォニーベンダーの提供するCTIなどを利用していますので、それぞれのツールとの連携部分のコードは改変、追記する必要があります。<br/>                      
                </p>
                <p>
                    <a name="linkToUseThisCallControl">このコントロールの使い方について</a><br/>
                    - シフトキー + q キーで取引先責任者からのインバウンドコールをシュミレートできます。<br/>
                    - シフトキー + w キーで既にケースが起票されている顧客からのインバウンドコールを趣味レートできます。<br/>
                    - シフトキー + e キーで、通話データをもとにした件名を自動生成した新規ケース作成ページをポップアップできます<br/>
                    - シフトキー + r キーで既存のリードからのインバウンドコールをシュミレートできます。<br/>
                    - "ログアウト" ボタンを押すと、テレフォニーシステムからのログアウトをエミュレートし、Salesforce.comのクリックダイアル機能が無効化されます。<br/>
                    - コールコントロールや、Salesforce上のすべての電話番号型フィールドをクリックすることで、クリックダイアルコールイベントが発生し、それをハンドリングできます。<br/>
                    - インバウンドコールの電話番号など、コールセンター設定を変更する際には、"openctiagent"Visualforceページを変更します。設定情報はVisualforceページコードの冒頭部分にあります。<br/>
                    - 通話後には通話ログが自動的に残るようになっていますが、現在のコードでは現状通話後の自動更新をサポートしていないので、必要であれば画面をリフレッシュして確認して下さい。<br/>           
                </p>
                <p>
                    このツールはサービスクラウドコンソールもしくは通常のSalesforce.comアプリケーション上で動作するようにデザインされています。 
                    <br/> またインタフェースはGoogle ChromeもしくはFirefoxに最適化しています。Internet Explorerではテストされていません。 
                </p>
            </div>
        </div>
    </div>
</div>

<audio id="phone_ring_mp3" src="{!URLFOR($Resource.opencti_resources,'phone_ring.mp3')}" ></audio>
<audio id="phone_dialing_mp3" src="{!URLFOR($Resource.opencti_resources,'phone_dialing.mp3')}" ></audio> 

<script src="/support/api/26.0/interaction.js" type="text/javascript"></script>

<script src="https://yuicombo.herokuapp.com/yui/yui/yui-min.js"></script>


<script type="text/javascript">
    // Body skin. Also available yui3-skin-sam
    document.body.className = 'yui3-skin-night';
    document.body.style.margin = 0;  
    
    // STATE VALUES 
    var LOGGED_IN = 'loggedIn';
    var CALL_DETAILS = 'callDetails';
    var ON_CALL = 'onCall';   
    var CALL_START_TIME = 'callStartTime';
    var END_CALL = 'endCall';
    var CALL_LOG = 'callLog';
    var CALLED_TYPE = 'calledType';
    var CALL_NUMBER = 'calledNumber';
    
    // State variables
    var phoneTabIndex = 1;
    var loginPanelWidth = '180px';
    var callStartTime = null;
    var calledType = null;    
    var callNumber = null;    
    
    // Console Flag
    var isInConsole = false;
    
    sforce.interaction.isInConsole(function(response){
        if(!response.result) {
            if (disableSoftphoneInStandardApp) {
                document.body.innerHTML = 'このツールはサービスクラウドコンソールの外部では動作しません。';
            } else {
                var sheet = document.createElement('style')
                sheet.innerHTML = '.yui3-skin-night .yui3-tabview-list li a {padding: 6px 10px 6px 10px !important;} .yui3-skin-night .yui3-tabview-list {height: 35px !important;} .yui3-skin-night .yui3-widget-bd input {width: 125px !important;}';
                document.body.appendChild(sheet);
                sforce.interaction.cti.setSoftphoneHeight(475);
            }
        } else {
            loginPanelWidth = '250px'; 
            isInConsole = true;
        }
    });
    
    YUI.namespace('VisualforceCallControl');
    
    var demoSoftphone = function(Y) {                   
        var agentDisposition = Y.one('#selectDisposition');            
        var tabview = new Y.TabView({srcNode:'#callControl'});                                 
        tabview.render();
        function disableTab(index, disabled) {
            if (disabled) {
                tabview._items[index].disable();    
            } else {
                tabview._items[index].enable();
            }                        
        }  
        // Disable the phone tab unless there is a call 
        disableTab(phoneTabIndex, true);
        
        // Call duration values
        var minutes = Y.one('#spanMinutes'); 
        var seconds = Y.one('#spanSeconds');
        var timer = null;                    
        
        // Call Log area
        var callLogText = document.getElementById('inputTextLog');
        var callDisposition = document.getElementsByName("callDisposition");

        // Login panel for agent credentials. Will show whenever the agent "logs off"
        var loginPanel = new Y.Panel({
            srcNode      : '#panelLogin',
            headerContent: 'コールセンター',
            close        : false,
            width        : loginPanelWidth,
            zIndex       : 5,
            centered     : true,
            modal        : true,
            visible      : false,
            render       : true,
            buttons      : [{
                value  : 'ログイン',
                section: Y.WidgetStdMod.FOOTER,
                action : function (e) {
                    setLocalStorageValue(LOGGED_IN, 'true');
                    this.hide();
                    sforce.interaction.cti.enableClickToDial();
                    sforce.interaction.cti.onClickToDial(clickToDialCallback);
                }
            }]
        });
        
        // Audio for call control ring and dial
        var phoneRingAudio = document.getElementById('phone_ring_mp3');
        var phoneDialingAudio = document.getElementById('phone_dialing_mp3');
        
        function renderButton(buttonId, onClickCallback) {
             var button = new Y.Button({
                 id: buttonId, 
                 srcNode:'#' + buttonId,
                 on: {
                     'click' : onClickCallback
                 }                  
             });
             button.render();
             return button;
        }

        // Softphone Logout button
        var buttonLogout = renderButton('buttonLogout', function(e){
            setLocalStorageValue(LOGGED_IN, 'false');
            loginPanel.show();
            sforce.interaction.cti.disableClickToDial();
        });

        function processEndCall() {
            if(timer) {
                timer.cancel();
            }
            tabview.selectChild(0);         
            agentDisposition.getDOMNode().value = 'readyForCalls';
            agentDisposition.getDOMNode().disabled = false;
            buttonLogout.enable();
            buttonEndCall.disable();
            disableTab(phoneTabIndex, true);            
        }
        
        function responseAnalysis(response) {
            alert(response.result);
        }

        function saveLog(response) {
            var timeStamp = new Date().toString();
            timeStamp = timeStamp.substring(0, timeStamp.lastIndexOf(':') + 3);             
            var currentDate = new Date();           
            var currentDay = currentDate.getDate();
            var currentMonth = currentDate.getMonth()+1;
            var currentYear = currentDate.getFullYear();
            
            var dueDate = currentYear+ '-' + currentMonth + '-' + currentDay;
            var saveParams = 'Subject=' + callLogSubject + timeStamp;
            saveParams += '&Status=completed';                 
            saveParams += '&CallType=' + calledType;
            saveParams += '&Activitydate=' + dueDate;
            saveParams += '&CallObject=' + currentDate.getTime();
            saveParams += '&Phone=' + callNumber;   
            saveParams += '&Description=' + callLogText.value;   
            var callDisposition = getSelectedCallDisposition();
            if(callDisposition) {
                saveParams += '&CallDisposition=' + callDisposition.value;       
            }                      
            saveParams += '&CallDurationInSeconds=' + Math.floor((currentDate.getTime() - callStartTime)/ 1000);
            
            var result = JSON.parse(response.result);
            if(result.objectId.substr(0,3) == '003') {
                saveParams += '&whoId=' + result.objectId;                    
            } else {
                saveParams += '&whatId=' + result.objectId;            
            }
            sforce.interaction.saveLog('Task', saveParams);
        }
    
        // End call button
        var buttonEndCall = renderButton('buttonEndCall', function(e){
            processEndCall();
            setLocalStorageValue(END_CALL, (new Date().getTime()));
            removeLocalStorageValue(ON_CALL);
            removeLocalStorageValue(CALL_START_TIME);
            removeLocalStorageValue(CALLED_TYPE);
            removeLocalStorageValue(CALL_NUMBER);
            sforce.interaction.getPageInfo(saveLog);
        });
                
        buttonEndCall.disable();
        
        // Clean number formatting
        function cleanFormatting(number) {        
            return number.replace(' ','').replace('-','').replace('(','').replace(')','');
        }
        
        // Get selected call disposition
        function getSelectedCallDisposition() {        
            for(var i=0;i<callDisposition.length;i++) {
                if (callDisposition[i].checked) {
                    return callDisposition[i];
                }                
            }
        }
        
        // Local storage persistence 
        function setLocalStorageValue(name,value){
            localStorage.setItem(name, value);
        }
        
        function getLocalStorageValue(name){
            return localStorage.getItem(name);
        }
        
        function setLocalStorageObject(key, value) {
            setLocalStorageValue(key, JSON.stringify(value));
        }
        
        function getLocalStorageObject(key) {
            var value = getLocalStorageValue(key);
            return value && JSON.parse(value);
        }
        
        function removeLocalStorageValue(key) {
            localStorage.removeItem(key);
        }
        
        // Methods for calculating the call duration                
        function increaseSeconds() {
            var elapsed = new Date().getTime() - callStartTime;     
            var secondsElapsed = Math.floor(((elapsed / 1000)));
            var minutesElapsed = Math.floor (secondsElapsed/60);
            secondsElapsed = secondsElapsed % 60;                                   
            seconds.set('innerHTML', secondsElapsed);
            minutes.set('innerHTML', minutesElapsed);            
        }
        
        function startCallDuration() {
            minutes.set('innerHTML', '00');
            seconds.set('innerHTML', '00');
            //increaseSeconds();
            timer = Y.later(1000, null, increaseSeconds, [], true);
        }
        
        // Methods for call initiation
        function screenPop(number) {
            sforce.interaction.searchAndScreenPop(number,'','inbound');
        }
        
        function setupCall() {
            startCallDuration();        
            disableTab(phoneTabIndex, false);
            // Select phone tab                           
            tabview.selectChild(phoneTabIndex);            
            agentDisposition.getDOMNode().value = 'onCall';
            agentDisposition.getDOMNode().disabled = true;  
            buttonLogout.disable();
            buttonEndCall.enable();
        }
        
        function startCall(number, callType) {
            callStartTime = new Date().getTime();
            setLocalStorageObject(CALL_START_TIME, callStartTime);            
            setLocalStorageValue(ON_CALL, 'true');
            if (!number) {
                callNumber = cleanFormatting(callFromContactANI);
            } else {
                callNumber = cleanFormatting(number);
            }            
            setLocalStorageValue(CALL_NUMBER, callNumber);
            setupCall();
            if (!callType) {
                phoneRingAudio.play();
                calledType = 'Inbound';
            } else {
                phoneDialingAudio.play();
                calledType = 'Outbound';
            }
            setLocalStorageObject(CALLED_TYPE, calledType);
        }
                        
        function startCallAndScreenPop(number, callType){
            screenPop(number);        
            startCall(number, callType);   
        }                                      
        
        function createTableRow(name, value){
            var row = new Object();
            row.name = name;
            row.value = value;
            return row;
        }
        
        function renderTable(data) {
            var tableDiv = Y.one('#divCallData');
            tableDiv.set('innerHTML', ''); 
            var table = new Y.DataTable({
                columns: [
                {key: 'name', label:'Name'}, 
                {key: 'value', label:'Value'}
                ],
                data: data,
    
                // Optionally configure table with a caption
                caption: '通話データ',
            });            
            table.render('#divCallData');
            if (data.length == 0) {
                table.showMessage(callBackSearchParam + 'は見つかりませんでした。');
            }           
        }
        
        // Phone panel display 
        function createTable(data){
            setLocalStorageObject(CALL_DETAILS, data);
            renderTable(data);
            // Clear call log area
            clearCallLog();
        }
        
        // Call backs and phone and salesforce interaction
        YUI.VisualforceCallControl.callFromNumber = function (name, number) {
            var data= [];
            data[0] = createTableRow('発信元', name);
            data[1] = createTableRow('電話番号', number);
            data[2] = createTableRow('着信番号', '0120-000-111'); 
            createTable(data);                 
            startCallAndScreenPop(number);
        }
        
        YUI.VisualforceCallControl.callToNumber = function (name, number) {
            var data= [];
            data[0] = createTableRow('通話先', name);
            data[1] = createTableRow('電話番号', number);
            createTable(data);      
            startCallAndScreenPop(number);           
        }
        
        function clickToDialCallback(response) {
            sforce.interaction.setVisible(true);  
            var result = JSON.parse(response.result);
            var data= [];
            data[0] = createTableRow('Caller', result.objectName.replace('+', ' '));
            data[1] = createTableRow('Type', result.object);
            data[2] = createTableRow('Number', result.number);
            data[3] = createTableRow('Record Id', result.objectId);            
            createTable(data);      
            startCallAndScreenPop(response.number, 'OUTBOUND');             
        }

        var callBackSearchParam = '';
        YUI.VisualforceCallControl.shortcutHandler = function(event) {
            // Shift-q call from Contact
            if (event.shiftKey && event.which == 81) {
                sforce.interaction.runApex('OpenCTIController','getContacts','ani=' + callFromContactANI, runApexCallback);
                callBackSearchParam = cleanFormatting(callFromContactANI);
            }
            // Shift-w call from case
            if (event.shiftKey && event.which == 87) {
                sforce.interaction.runApex('OpenCTIController','getCases','caseNumber=' + callFromIVRCaseNumber, runApexCaseCallback);
                callBackSearchParam = callFromIVRCaseNumber;
            }
            // Shift-e basic screen pop
            if (event.shiftKey && event.which == 69) {
                sforce.interaction.screenPop(basicScreenPopUrl);
            }
            // Shift-r call from lead
            if (event.shiftKey && event.which == 82) {
                sforce.interaction.runApex('OpenCTIController','getLeads','ani=' + callFromLeadANI, runApexCallback);      
                callBackSearchParam = cleanFormatting(callFromLeadANI);
            }
            
        }        

        function runApexCallback(response) {
            var result = JSON.parse(response.result);
            var data= [];
            var i = 0;
            for(var attribute in result) {
                if(result.hasOwnProperty(attribute)) {
                    var objectData = result[attribute];
                    for(var objectField in objectData) {
                        if(objectData.hasOwnProperty(objectField) && objectField != 'attributes' && objectField != 'Id') {
                            data[i++] = createTableRow(objectField, objectData[objectField]);
                        }
                    }
                }
            }
            createTable(data);
            startCallAndScreenPop(callBackSearchParam);
        }
        
        function runApexCaseCallback(response) {
            var result = JSON.parse(response.result);
            var data= [];
            var i = 0;
            var bookmarkableURL = '/ui/support/servicedesk/ServiceDeskPage#';
            var focusedTab = '';
            for(var attribute in result) {
                if(result.hasOwnProperty(attribute)) {
                    var caseData = result[attribute];
                    for(var caseField in caseData) {
                        if(caseData.hasOwnProperty(caseField) && caseField != 'attributes') {
                            if (caseField == 'Id' || caseField == 'ContactId' || caseField == 'AccountId') {
                                if (caseField == 'Id') {
                                    focusedTab = '/' + caseData[caseField];
                                }
                                bookmarkableURL += '/' + caseData[caseField] + '|';
                            } else {
                                data[i++] = createTableRow(caseField, caseData[caseField]);
                            }
                        }
                    }
                }
            }
            createTable(data);      
            startCall();
            if (bookmarkableURL === '/ui/support/servicedesk/ServiceDeskPage#') {
                return;
            }
            bookmarkableURL += '|' + focusedTab;
            if (!isInConsole) {
                bookmarkableURL = focusedTab;
            }            
            sforce.interaction.screenPop(bookmarkableURL);                               
        }
        
        function clearCallLog() {
            callLogText.value = '';  
            removeLocalStorageValue(CALL_LOG);          
            getSelectedCallDisposition.checked = false;
        }
        
        YUI.VisualforceCallControl.handleLogEntry = function() {
            setLocalStorageValue(CALL_LOG, callLogText.value);
        }
                        
        if(getLocalStorageValue(LOGGED_IN)==null || getLocalStorageValue(LOGGED_IN)=='false') {
            loginPanel.show();
        }
        sforce.interaction.cti.onClickToDial(clickToDialCallback); 
        
        function processLocalStorageStartCall() {
            onCallData = getLocalStorageObject(CALL_DETAILS);
            callStartTime = getLocalStorageObject(CALL_START_TIME);
            calledType = getLocalStorageObject(CALLED_TYPE);
            callNumber = getLocalStorageObject(CALL_NUMBER);
            setupCall();
        }
        
        var onCallData = getLocalStorageObject(CALL_DETAILS);
        if(onCallData!==null) {
            renderTable(onCallData);
            if (getLocalStorageValue(ON_CALL) != null) {
                processLocalStorageStartCall();
            }
        }
        
        callLogText.value = getLocalStorageValue(CALL_LOG);

        function storageEventHandler(e){
            if (e.key == END_CALL) {
                processEndCall();
            } else if (e.key == ON_CALL && e.newValue=='true') {
                processLocalStorageStartCall();                
            } else if (e.key == CALL_LOG) {
                callLogText.value = e.newValue;                
            }
        }        
        window.addEventListener('storage', storageEventHandler, false);
    };
    YUI({skin: 'night'}).use(
        'tabview', 
        'button', 
        'datatable',
        'node', 
        'panel',
        demoSoftphone
    ); 
    window.onkeypress = function(event) {YUI.VisualforceCallControl.shortcutHandler(event);};
    
</script>      
</apex:page>