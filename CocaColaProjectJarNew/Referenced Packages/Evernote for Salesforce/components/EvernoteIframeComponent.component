<apex:component id="EvernoteIframeComponent" allowDML="true" controller="Evernote.EvernoteController" access="global">
    <!-- Component attributes that are used in the JS Remote functions -->
    <apex:attribute type="String" name="ObjectType" id="ObjectType" description="Salesforce Object API Name. e.g Account/Contact/Opportunity/Lead/Case/Custom_Object__c" access="global" />
    <apex:attribute type="String" name="SalesforceRecordId" id="SalesforceRecordId" description="Salesforce record Id of Account/Contact/Opportunity/Lead/Custom Object in context" access="global"/>
    <apex:attribute type="String" assignTo="{!evernoteendPoint}" name="EvernoteURI" description="Endpoint for Evernote environment" access="global"/>
    <apex:includeScript value="{!URLFOR($Resource.Evernote__easyXDM, 'easyXDM/easyXDM.min.js')}"  />
    <apex:includeScript value="{!URLFOR($Resource.Evernote__easyXDM, 'easyXDM/json2.js')}"  />
    <style type="text/css">
        #embedded iframe {
            width: 100%;
        }
    </style>
    
    <script type="text/javascript">
        function checkMobile(a) {
            if (/(android|bb\d+|meego|android|ipad|playbook|silk).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                return true;
            } else { 
                return false;
            }
        }
    
        var isMobile = checkMobile(navigator.userAgent || navigator.vendor || window.opera);
        var deviceType = isMobile ? "mobile" : "desktop";
    </script>
    
    <script>
    
        if (typeof console === "undefined"){
            console={};
            console.log = function(){
               return;
            }
        }
        window.viewPortHeight = document.documentElement.clientHeight;
        window.SFDC = window.SFDC || {
            
            getUserEmail: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getUserEmail}',
                                                            handleUserEmailResult,
                                                            {escape:true});
            }, 
            setUserAuthToken: function(msg) 
            {
                var token = msg.token;
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.setUserAuthToken}',
                                                            token,
                                                            handleSetUserAuthTokenResult,
                                                            {escape:true});
            },
            getUserAuthToken: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getUserAuthToken}',
                                                            handleGetUserAuthTokenResult,
                                                            {escape:true});
            },
            deleteUserAuthToken: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.deleteUserAuthToken}',
                                                            handleDeleteUserAuthTokenResult,
                                                            {escape:true});
            },
            linkNote: function(note)
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.linkNote}',
                                                            '{!SalesforceRecordId}',
                                                            JSON.stringify(note),
                                                            handleLinkNoteResult,
                                                            {escape:true});
            },
            unlinkNote: function(note)
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.unlinkNote}',
                                                            '{!SalesforceRecordId}',
                                                            JSON.stringify(note),
                                                            handleUnlinkNoteResult,
                                                            {escape:true});
            },
            getRecordInfo: function()
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getRecordInfoDetail}',
                                                            '{!SalesforceRecordId}','{!URLFOR("/")}',
                                                            handleGetRecordInfoResult,
                                                            {escape:true});
            },
            getLinkedNotes: function()
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getLinkedNotes}',
                                                            '{!SalesforceRecordId}',
                                                            handleGetLinkedNotesResult,
                                                            {escape:true});
            },
            setBusinessAuthToken: function(msg) 
            {
                var token = msg.token;

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.setBusinessAuthToken}',
                                                            token,
                                                            handleSetBusinessAuthTokenResult,
                                                            {escape:true});
            },
            getBusinessAuthToken: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getBusinessAuthToken}',
                                                            handleGetBusinessAuthTokenResult,
                                                            {escape:true});
            },
            deleteBusinessAuthToken: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.deleteBusinessAuthToken}',
                                                            handleDeleteBusinessAuthTokenResult,
                                                            {escape:true});
            },
            setUserNotebookId: function(msg) 
            {
                var token = msg.token;

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.setUserNotebookId}',
                                                            token,
                                                            handleSetUserNotebookIdResult,
                                                            {escape:true});
            },
            getUserNotebookId: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getUserNotebookId}',
                                                            handleGetUserNotebookIdResult,
                                                            {escape:true});
            },
            deleteUserNotebookId: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.deleteUserNotebookId}',
                                                            handleDeleteUserNotebookIdResult,
                                                            {escape:true});
            },
            getStartURL: function() 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.getStartURL}',
                                                            handleGetStartURLResult,
                                                            {escape:true});
            },
            //todo:open the link passed by evernote when calling this function
            openLinkInNativeClient: function(noteLink) 
            {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.EvernoteController.openNoteLinkInNativeClient}',
                                                            JSON.stringify(noteLink),
                                                            '{!SalesforceRecordId}',
                                                            handleOpenLinkInNativeClientResult,
                                                            {escape:true});
            },
            openNativeClient: function() 
            {
                if (deviceType == 'mobile') {
                     var url = 'evernote://';
	                 openiOSLink(url, false);
                }
                else{
	                openiOSLink(url, true);
                }
            },
            noteUpdated: function() 
            {
                window.open('com.salesforce.salesforce1://');
            },
            openPopupWindow: function(msg)
            {
                if (deviceType == 'mobile') {
                     openiOSLink(msg, false);
                } else {
                    window.open(msg, '', 'width=1028px,height=800px');
                }
            }
        };
        
        function handleSetUserAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleSetUserAuthTokenResponse(result);
            }
        }
        
        function handleGetUserAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleGetUserAuthTokenResponse(result);
            }
        }
        
        function handleDeleteUserAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
            } else {
                rpc.handleDeleteUserAuthTokenResponse(result);
            }
        }
        
        function handleUserEmailResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleUserEmailResponse(result);
            }
        }
        
        function handleGetRecordInfoResult(result, event)
        {
            if(event.type == 'exception')
            {
                console.log(event.message);
            }
            else
            {
                rpc.handleGetRecordInfoResponse(result);
            }
        }
        
        function handleLinkNoteResult(result, event)
        {
            if(event.type == 'exception')
            {
                console.log(event.message);
            }
            else
            {
                rpc.handleLinkNoteResponse(result);
            }
        }
        
        function handleUnlinkNoteResult(result, event)
        {
            if(event.type == 'exception')
            {
                console.log(event.message);
            }
            else
            {
                rpc.handleUnlinkNoteResponse(result);
            }
        }
        
        function handleGetLinkedNotesResult(result, event)
        {
            if(event.type == 'exception')
            {
                console.log(event.message);
            }
            else
            {
                rpc.handleGetLinkedNotesResponse(result);
            }
        }
        /* Reloaded the parent window */
        function popUpClosed() 
        {
            parent.location.href = '{!URLFOR("/" + $CurrentPage.parameters.id)}';
        }
        
        function handleSetBusinessAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleSetBusinessAuthTokenResponse(result);
            }
        }
        
        function handleGetBusinessAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleGetBusinessAuthTokenResponse(result);
            }
        }
        
        function handleDeleteBusinessAuthTokenResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                alert('success');
                rpc.handleDeleteBusinessAuthTokenResponse(result);
            }
        }
        
        function handleSetUserNotebookIdResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleSetUserNotebookIdResponse(result);
            }
        }
        
        function handleGetUserNotebookIdResult(result, event) 
        {
            if(event.type == 'exception') {
                //alert(event.message);
            } else {
                rpc.handleGetUserNotebookIdResponse(result);
            }
        }
        
        function handleDeleteUserNotebookIdResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleDeleteUserNotebookIdResponse(result);
            }
        }
        
        function handleGetStartURLResult(result, event) 
        {
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleGetStartURLResponse(result);
            }
        }
        
        function handleOpenLinkInNativeClientResult(result, event) 
        {
            console.log('in openLinkInNativeClient result is ' + result);
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                openiOSLink(result, false);
            }
        }
        
        function noteUpdated(noteLink, oldUSN) 
        {
        var msg = noteLink + ' ' + oldUSN;
                //to do pass notelink and usn in a json
                rpc.noteUpdated(msg);
          
        }
        
        function openWithNote(noteGUID) 
        {
            //to do pass noteGUID in a json
                rpc.noteUpdated(noteGUID);
          
        }
        
        function handleOpenNativeClientResult(result, event) 
        { 
            if(event.type == 'exception') {
                console.log(event.message);
            } else {
                rpc.handleOpenNativeClientResponse(result);
            }
        }
        
        function openiOSLink(url, redirect) 
        {
	        sforce.one.navigateToURL(url, redirect);
        }

    </script>
    
    <!-- Evernote.js included from Evernote platform -->
    
    <script id = "evernoteClient" type="text/javascript"></script>
    
    <script>
        document.getElementById("evernoteClient").setAttribute("src", "{!evernoteendPoint}?formfactor=" + deviceType);
    </script>

    <!-- Div for Iframe for Evernote application -->
    <div id="pageBlockId" >
        <div id="embedded" style="height:504px" />
    </div>
    <script type="text/javascript" language="javascript">
        document.getElementById("embedded").setAttribute("style", "height:" +  window.viewPortHeight + "px;");
        // Listen for resize changes
        window.addEventListener("resize", function() {
        // Get screen size (inner/outerWidth, inner/outerHeight)
            document.getElementById("embedded").setAttribute("style", "height:" +  document.documentElement.clientHeight + "px !important;");
        }, false);
    </script>
</apex:component>